ACTIONS IN REDUX

All state updates in Redux have to go through the Redux store, and are triggered by dispatching actions.

An action is a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, and then updates its state accordingly.

- Creating an action

You create a Redux action by creating an object with a 'type' property that specifies what does the action perform:

  let action = {
    type: 'LOGIN'
  };

- Sending the action to the store

You send an action to the redux store so it can update its state by using action creators. An action creator is a JavaScript function that returns an action:

  function actionCreator() {
    return action;
  }

Then, you have to dispatch actions to the Redux Store:

  store.dispatch(actionCreator());

The whole process looks like this:

  const store = Redux.createStore((state = {login: false}) => state);
  let action = {type = 'LOGIN'};
  let loginAction = () => {
    return {type: 'LOGIN'};
  }

  store.dispatch(action); // These lines are equivalent
  store.dispatch(loginAction()); // These lines are equivalent

- Handling the action in the store

The redux store then needs to respond to that action. This is the job of a reducer function.

Reducer functions are reponsible for the state modifications that take place in response to actions:

  const reducer = (state = {login: false}, action) => {
    if (action.type === 'LOGIN') {
      return {login: true};
    } else {
      return state;
    }
  }

It takes a state and an action as arguments, and it will always return a new state. It is a pure function because it has no side effects.

- Using a switch statement to handle multiple actions

  const defaultState = {
    authenticated: false
  };

  const authReducer = (state = defaultState, action) => {
    switch (action.type) {
      case 'LOGIN':
        return {authenticated: true};
        break;
      case 'LOGOUT':
        return (authenticated: false);
        break;
      default:
        return state;
    }
  }

  const store = Redux.createStore(authReducer);

  const loginUser = () => {
    return {
      type: 'LOGIN'
    }
  }
  const logoutUser = () => {
    return {
      type: 'LOGOUT'
    }
  }

  store.dispatch(loginUser()) // Logs the user in
  store.dispatch(logoutUser()) // Logs the user out