WORKING WITH OBJECT STORES

To store information into a database in IndexedDB, you need 'object stores'. They are the places where the data is stored (much like tables in SQL databases or collections in NoSQL databases).

    > A database may have multiple stores depending on the information they store (one for users, other for goods, etc).
    > You can store almost any value in object stores.
    > There must be a unique key for every value in the store (like an ID). And the key must be one of these types: number, date, string, binary, or array.
    
IMPORTANT: An object store can only be created/modified while updating the DB version, in the 'upgradeneeded' handler.

1. Creating object stores

+ Syntax:

    dataBase.createObjectStore(<name>[, <keyOptions>]);
        Creates an object store.
        <name> (string): The object store name.
        <keyOptions> (object): Optional object with two properties:
            keyPath (object property): A property that IndexedDB will use as the key.
            autoIncrement (bool): If true, the key for a newly stored object is generated automatically, as an ever incrementing integer.

    > If keyOptions is not supplied, a key to identify the store has to be provided later.

- Example:

    ...
    newRequest.onupgradeneeded = () => {
        let dataBase = newRequest.result;
        dataBase.createObjectStore('books', {keyPath: 'id'});
    }
    ...

2. Updating an object store

+ Syntax:

    ...

3. Deleting an object store

+ Syntax:

    dataBase.deleteObjectStore(<name>);
        Deletes the object store with the specified <name>.