ARRAY METHODS

- Retrieving information from the array

    Array.isArray(<element>)
        Returns true if the specified element is an array.

    .length
        Returns the length of the array.

    .indexOf(<element>)
        Returns the index of the specified element if it exists in the array. If not, it returns -1.

    .reverse()
        Reverses the order of the array.

    .slice(<start_index>, <end_index>)
        Copies a given number of elements to a new array, leaving the first one untouched.

            let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];
            let weatherToday = weatherConditions.slice(1, 3);

        weatherToday will have the value ['snow', 'sleet'].

    .map(<callback_function>)
        Iterates over each item in an array and returns a new array containing the results of calling the callback function on each element, without mutating the original array.

            const users = [
                {name: 'John', age: 34},
                {name: 'Amy', age: 20},
                {name: 'CamperCat', age: 2}
            ];

            const namesAndAges = users.map(user => ({
                Name: user.name,
                Age: user.age
            })); //
            console.log(names);

        The console will display [{'Name':'John', 'Age':'34'}, {'Name':'Amy', 'Age':'20'}, {'Name':'CamperCat', 'Age':'2'}]

    .filter(<callback_function>)
        Iterates over and calls a function on each element of an array and returns a new array containing only the elements for which that function returns true. In other words, it filters the array based on the function passed to it. It doesn't modify the original array.

            const users = [
                {name: 'John', age: 34},
                {name: 'Amy', age: 20},
                {name: 'CamperCat', age: 2}
            ];

            const usersUnder30 = users.filter(user => user.age < 30);
            console.log(usersUnder30);

        The console will display [{name: 'Amy', age: 20}, {name: 'CamperCat', age: 2}]

    .concat(<array>)
        Concatenates the specified array into the original array.

            const arr1 = [1, 2, 3];
            const arr2 = [4, 5, 6];

            console.log(arr1.concat(arr2));

        The console will display [1, 2, 3, 4, 5, 6]

- Modifying the array

    .push(<element>)
        Inserts new elements at the end of the array.

    .unshift(<element_1>, <element_2>)
        Inserts new elements at the start of the array.

    .pop()
        Deletes and returns the last element of the array.

    .shift()
        Deletes and returns the first element of the array.

    .splice(<start_index>, <amount_to_delete>, <elements_to_add>)
        Removes any number of consecutive elements from anywhere in an array, returning them in another array.

            let array = ['today', 'was', 'not', 'so', 'great'];
            array.splice(2, 2);

        array will have the value ['today', 'was', 'great'];

        If called with the third argument, it will add the specified elements at the specified position.

            const numbers = [10, 11, 12, 12];
            numbers.splice(3, 1, 13, 14);

        numbers will have the value [10, 11, 12, 13, 14]

    .reduce((<accumulator>, <currentValue>) => <operation>, <second accumulator>)
        Reduces an array to a single value. Here are its arguments, in order:
        - accumulator:
        Gets assigned the return value of the callback function from the previous iteration. It takes the value of the first element of the array on the first iteration.
        - currentValue:
        Is the current value being processed. It takes the value of the second element of the array on the first iteration.
        - operation
        Is the operation you want to perform between each pair of elements
        - second accumulator (optional):
        When specified, is the initial value you want to set the accumulator on the first iteration.

            const array1 = [1, 2, 3, 4];
            const reducer = (accumulator, currentValue) => accumulator + currentValue;
            array.reduce(reducer) // Returns 10

    .sort(<sorting_function>)
        Sorts the elements of an array and returns the sorted array. The function parameter 'sorting_function' is used to determine the order of the elements. If ommitted, the elements are sorted in ascending, Unicode character order.

            var a = new Array(4, 11, 2, 10, 3, 1);
            var b = a.sort(); // Output: 1, 10, 11, 2, 3, 4

            b = a.sort(CompareForSort); // Output: 1, 2, 3, 4, 10, 11

            function CompareForSort(first, second) {
                if (first == second) {return 0;}
                if (first < second) {
                    return -1;
                } else {
                    return 1;
                }
            }

    .filter(...) (ALREADY EXPLAINED IN FP METHODS)
    .every(...) (ALREADY EXPLAINED IN FP METHODS)
    .forEach(...)
    .flat(...)