METHODS IN OOP

Methods are the behaviours that an object can perform. They are defined as functions inside the desired objects.

1. Define methods within objects

You can define functions in objects like so:

    const person = {
        name : "Taylor",
        sayHello() {
            return `Hello! My name is ${this.name}.`;
        }
    };

Or like so:

    let duck = {
        name: "Aflac",
        numLegs: 2,
        sayName: function() {return "The name of this duck is " + this.name + ".";} // Note the 'this' keyword
    };
    duck.sayName(); // Calls the sayName method

2. Define the Constructor function/method

Constructors are functions that create new objects. They define properties and behaviors that will belong to the new object.

    function Bird() {
        this.name = "Albert";
        this.color = "blue";
        this.numLegs = 2;
    }

This constructor defines a Bird object with properties name, color, and numLegs set to Albert, blue, and 2, respectively. Constructors follow a few conventions:

- Constructors are defined with a capitalized name to distinguish them from other functions that are not constructors.
- Constructors use the keyword this to set properties of the object they will create. Inside the constructor, this refers to the new object it will create.
- Constructors define properties and behaviors instead of returning a value as other functions might.

You can use the 'class' keyword to create objects. This keyword is just syntax, and not a full-fledged class-based implementation of an object-oriented paradigm, unlike in languages such as Java, Python, Ruby, etc.

Let's create a class "SpaceShuttle" and an instance of that class called "zeus":

    class SpaceShuttle {
        constructor(targetPlanet) {
            this.targetPlanet = targetPlanet;
        }
    }
    const zeus = new SpaceShuttle('Jupiter');
    
It should be noted that the class keyword declares a new function, to which a constructor is added. This constructor is invoked when new is called to create a new object.

Note: UpperCamelCase should be used by convention for ES6 class names, as in SpaceShuttle used above.