BLOB INTERFACE

It represents a blob, which is a file-like object of immutable, raw data that can be read as text or binary data, or converted into a 'ReadableStream' so its methods can be used for processing the data.

A blob can also be defined as a collection of binary data stored as a single entity on Database Management Systems.

In JS, blobs are generally stored on disk or other external data stores. This is why to access and retrieve them, you need to use asynchronous code.

0. Constructor

  Blob(<array>, <options>)
    Returns a newly created Blob object which contains a concatenation of all the data in the array passed into the constructor.
    <array> : Can be an ArrayBuffer, an ArrayBufferView, Blob, USVString object, or a mix of any of them.
    <options> : Optional object which specifies the following properties:
      type: The MIME type of the data that will be stored into the blob. (default: "").
      endings: Specifies how to interpret newline characters '\n' within the contents.

1. Properties

  - Syntax:

    Blob.prototype.<property>

  .size
    Size (in bytes) of the data contained in the Blob object.

  .type
    String indicating the MIME type of the data contained in the Blob.

2. Methods

  - Syntax:

    Blob.prototype.<method(...)>

  .arrayBuffer(...)
    Returns a promise that resolves with an 'ArrayBuffer' containing the entire contents of the Blob as binary data.

  .slice(...)
    Returns a new Blob object containing the data in the specified range of bytes on the blob on which it's called.

  .stream(...)
    Returns a 'ReadableStream' that can be used to read the contents of the Blob.

  .text(...)
    Returns a promise that resolves with a USVString containg the entire contents of the Blob interpreted as UTF-8.