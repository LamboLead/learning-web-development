ASYNC-AWAIT IN JAVASCRIPT

The 'Async' and 'Await' keywords are extensions of promises. They also allow to execute asynchronous code by creating an underground promise.

1. Async

Async functions allows to write promise-based code as if it were synchronous, without blocking the execution thread.

> These function will always return a value.
> Using 'async' implies that a promise will be returned. If it isn't, the promise automatically returns it as resolved.

+ Syntax

    async function functionName() {
        // code
    }

    functionName().then();

Calling the '.then()' method in the function specifies that the promise was returned.

2. Await

Await allows to wait for a promise.

> It can only be used inside an Async block only.
> It specifies to only pause the execution of the function block until the promise returns a result. The rest of the code is unaffected.

- Example:

async function firstAsync() {
    let promise = new Promise((res, rej) => {
        setTimeout(() => res("Now it's done!"), 1000)
    });
    let result = await promise;

    console.log(result);
}

firstAsync();

NOTE:
> Async-Await makes execution sequential. This means that parallelled execution is not allowed.

INVESTIGATE: Promise.all()